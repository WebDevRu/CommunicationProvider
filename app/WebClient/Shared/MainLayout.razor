@inherits LayoutComponentBase
@using System.Security.Claims
@inject AuthenticationStateProvider AuthenticationStateProvider
@using app.Core.Services;
@using app.WebClient.State
@using app.WebClient.Components.Admin
@using app.WebClient.Components.Subscriber
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject State.ApplicationState AppState;

<PageTitle>app</PageTitle>

@if (authUserType == "admin")
{
    <div class="adminPage">
        <div class="sidebar">
            <SideBar />
        </div>
        <main class="adminMain">
            <article class="content px-4">
                @Body
            </article>
        </main>
    </div>
}
else if (authUserType == "subscriber" && isSubscriberInternalPage) {
    <div class="adminPage">
        <div class="sidebar-subscriber">
            <SubscriberSidebar />
        </div>
        <main class="adminMain">
            <article class="content px-4">
                @Body
            </article>
        </main>
    </div>
}
else
{
    <div class="page">
        <main>
            <article>
                @Body
            </article>
        </main>
    </div>
}

@code {
    private string? message;
    
    private string authMessage;
    private string surnameMessage;
    private AdminAuth adminAuth = new ();
    private SubscriberAuth subscriberAuth = new ();
    private IEnumerable<Claim> claims = Enumerable.Empty<Claim>();
    
    [Inject]
    public NavigationManager MyNavigationManager {get; set;} = default!;

    private string authUserType = "guest";

    private bool isSubscriberInternalPage = false;
    
    private async Task GetClaimsPrincipalData()
    {
        var login = await localStorage.GetItemAsync<string>("Login");
        var password = await localStorage.GetItemAsync<string>("Password");
        var userType = await localStorage.GetItemAsync<string>("UserType");
        var args = new LoginArgs { Login = login, Password = password };
        
        try
        {
            if (userType == "admin")
            {
                adminAuth.PostLogin(args);
                var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
                var user = authState.User;
        
                if (user.Identity.IsAuthenticated)
                {
                    authUserType = "admin";
                    AppState.InitApp(UserTypes.Admin);
                    StateHasChanged();
                }
                else
                {
                    authMessage = "The user is NOT authenticated.";
                }   
            }

            if (userType == "subscriber")
            {
                subscriberAuth.PostLogin(args);
                var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
                var user = authState.User;
        
                if (user.Identity.IsAuthenticated)
                {
                    authUserType = "subscriber";
                    AppState.InitApp(UserTypes.Abonent);
                    StateHasChanged();
                }
                else
                {
                    authMessage = "The user is NOT authenticated.";
                }
            }
            
            Console.WriteLine(authUserType, userType);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
    }

    protected override void OnInitialized()
    {
        message = $"Initialized at {DateTime.Now}";
        var Uri = MyNavigationManager.Uri;
        if (
            Uri == MyNavigationManager.BaseUri + "/subscriber/profile" ||
            Uri == MyNavigationManager.BaseUri + "/subscriber/history"
            )
        {
            isSubscriberInternalPage = true;
        }
        GetClaimsPrincipalData();
    }
}
