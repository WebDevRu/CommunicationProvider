@inherits LayoutComponentBase
@using System.Security.Claims
@inject AuthenticationStateProvider AuthenticationStateProvider
@using app.Core.Services;
@using app.WebClient.State
@using app.WebClient.Components.Admin
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject State.ApplicationState AppState;

<PageTitle>app</PageTitle>

@if (isAuthed)
{
    <div class="adminPage">
        <div class="sidebar">
            <SideBar />
        </div>
        <main class="adminMain">
            <article class="content px-4">
                @Body
            </article>
        </main>
    </div>
}
else
{
    <div class="page">
        <main>
            <article>
                @Body
            </article>
        </main>
    </div>
}

@code {
    private string? message;
    
    private string authMessage;
    private string surnameMessage;
    private AdminAuth adminAuth = new ();
    private IEnumerable<Claim> claims = Enumerable.Empty<Claim>();

    private bool isAuthed = false;
    
    private async Task GetClaimsPrincipalData()
    {
        var login = await localStorage.GetItemAsync<string>("Login");
        var password = await localStorage.GetItemAsync<string>("Password");
        var args = new LoginArgs { Login = login, Password = password };
        
        try
        {
            var admin = adminAuth.PostLogin(args);
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;
        
            if (user.Identity.IsAuthenticated)
            {
                authMessage = $"{user.Identity.Name} is authenticated.";
                claims = user.Claims;
                surnameMessage =
                    $"Surname: {user.FindFirst(c => c.Type == ClaimTypes.Surname)?.Value}";
                
                isAuthed = true;
                AppState.InitApp(UserTypes.Admin);
                StateHasChanged();
            }
            else
            {
                authMessage = "The user is NOT authenticated.";
            }
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
    }

    protected override void OnInitialized()
    {
        message = $"Initialized at {DateTime.Now}";
        GetClaimsPrincipalData();
    }
}
