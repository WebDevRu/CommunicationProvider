@namespace app.WebClient.Components.Auth.AdminLoginComponent
@using System.ComponentModel.DataAnnotations;
@using app.Core.Services;
@using System.Text.Json;
@using app.Core.Model
@using app.WebClient.Pages
@inject IJSRuntime JsRuntime;
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject NavigationManager NavManager

<div class="cont">
    <Card 
        Bordered="true" 
        Title=@("Вход администратора")
        Style="width: 300px; height: fit-content"
    >
        <Body>
        <Form Loading="loading" Model="@model" 
              LabelColSpan="8"
              WrapperColSpan="16"
              OnFinish="OnFinish" 
              OnFinishFailed="OnFinishFailed">
            <FormItem Label="Почта" >
                <Input @bind-Value="@context.Username"/>
            </FormItem>
            <FormItem Label="Пароль">
                <InputPassword @bind-Value="@context.Password" />
            </FormItem>
            <FormItem WrapperColOffset="8" WrapperColSpan="16">
                <Button Type="@ButtonType.Primary" HtmlType="submit">
                    Отправить
                </Button>
            </FormItem>
        </Form>
        </Body>
    </Card>
</div>

@code {
    public class Model
    {
        [Required]
        public string Username { get; set; }
        [Required]
        public string Password { get; set; }
    }

    private Model model = new Model();

    private AdminAuth adminAuth = new ();

    private Admin _adminModel = new ();
    
    protected async Task WriteAuthCookies()
    {
        await localStorage.SetItemAsync("UserType", "admin");
        await localStorage.SetItemAsync("Id", _adminModel?.Id);
        await localStorage.SetItemAsync("Login", _adminModel?.Email);
        await localStorage.SetItemAsync("Password", _adminModel?.Password);
        NavManager.NavigateTo("/admin");
    }

    private void OnFinish(EditContext editContext)
    {
        var args = new LoginArgs { Login = model.Username, Password = model.Password };

        try
        {
            var admin = adminAuth.PostLogin(args);
            _adminModel = admin;
            WriteAuthCookies();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
    }

    private void OnFinishFailed(EditContext editContext)
    {
        Console.WriteLine($"Failed:{JsonSerializer.Serialize(model)}");
    }

    bool loading = false;

    void toggle(bool value) => loading = value;
}