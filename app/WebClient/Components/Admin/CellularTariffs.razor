@namespace app.WebClient.Components.Admin

@using System.ComponentModel.DataAnnotations;
@using app.Core.Services;
@using app.Core.Model
@using System.Text.Json;
@inject NotificationService _notice

<Content>
    <div class="site-layout-content">
        <h1>Добавление тарифа сотовой связи:</h1>
        <div class="spacer"/>
        
        <div class="form">
            <Form @ref="form"
                  Model="@model"
                  OnFinish="OnFinish"
                  OnFinishFailed="OnFinishFailed"
                  LabelColSpan="8"
                  WrapperColSpan="16">
                <FormItem Label="Название">
                    <Input @bind-Value="@context.Title" />
                </FormItem>
                <FormItem Label="Описание">
                    <Input @bind-Value="@context.Description" />
                </FormItem>
                <FormItem Label="Период в секундах">
                    <Input @bind-Value="@context.PeriodSeconds" />
                </FormItem>
                <FormItem Label="Стоимость периода">
                    <Input @bind-Value="@context.PeriodPaymentAmount" />
                </FormItem>
                <FormItem Label="Размер пакет в ГБ">
                    <Input @bind-Value="@context.MobileInternetLimitMb" />
                </FormItem>
                <FormItem Label="Количество минут связи:">
                    <Input @bind-Value="@context.MobileCallsMinutes" />
                </FormItem>
                <FormItem WrapperColOffset="8" WrapperColSpan="16">
                    <Button Type="@ButtonType.Primary" HtmlType="submit">
                        Создать
                    </Button>
                    <Button OnClick="Reset">
                        Отменить
                    </Button>
                </FormItem>
            </Form>
        </div>
        <div class="spacer"/>
        <h3>Список тарифов:</h3>
        <div class="list">
            @foreach (var tarriff in Tarriffs)
            {
                <Card Bordered Title=@(tarriff.Title) Style="width: 300px; overflow: hidden"> 
                    <Body>
                    <Statistic Title="Описание" Value=@(tarriff.Description) />
                    <Statistic Title="Длина периода в часаx" Value=@(tarriff.PeriodSeconds / 3600) />
                    <Statistic Title="Стоимость периода в руб." Value=@(tarriff.PeriodPaymentAmount) />
                    <div class="actionsRows">
                        <Popconfirm 
                            Title="Вы точно уверены?"
                            OkText="Да" 
                            CancelText="Нет"
                            OnConfirm="() => ConfirmDeletion(tarriff.Id)"
                        >
                            <Button Danger Type="@ButtonType.Primary">
                                Удалить
                            </Button>
                        </Popconfirm>
                        <Button Type="@ButtonType.Primary" OnClick="@(() => OpenEditModal(
                                                                        tarriff.Id,
                                                                        tarriff.Title,
                                                                        tarriff.Description,
                                                                        tarriff.PeriodSeconds,
                                                                        tarriff.PeriodPaymentAmount
                                                                        ))">
                            Редактировать
                        </Button>
                    </div>
                    </Body>
                </Card>
            }
        </div>
    </div>
    <Modal Title="Редактировать"
           Visible="@_visible"
           OnOk="@HandleOk"
           OnCancel="@HandleCancel"
           >
        <div class="form">
                    <Form @ref="editForm"
                          Model="@editModel"
                          OnFinish="OnFinishEdit"
                          OnFinishFailed="OnFinishFailed"
                          LabelColSpan="8"
                          WrapperColSpan="16">
                        <FormItem Label="Название">
                            <Input @bind-Value="@context.Title" />
                        </FormItem>
                        <FormItem Label="Описание">
                            <Input @bind-Value="@context.Description" />
                        </FormItem>
                        <FormItem Label="Период в секундах">
                            <Input @bind-Value="@context.PeriodSeconds" />
                        </FormItem>
                        <FormItem Label="Стоимость периода">
                            <Input @bind-Value="@context.PeriodPaymentAmount" />
                        </FormItem>
                        <FormItem Label="Размер пакет в ГБ">
                            <Input @bind-Value="@context.MobileInternetLimitMb" />
                        </FormItem>
                        <FormItem Label="Количество минут связи:">
                            <Input @bind-Value="@context.MobileCallsMinutes" />
                        </FormItem>
                        <FormItem WrapperColOffset="8" WrapperColSpan="16">
                            <Button Type="@ButtonType.Primary" HtmlType="submit">
                                редактировать
                            </Button>
                            <Button OnClick="ResetEdit">
                                Отменить
                            </Button>
                        </FormItem>
                    </Form>
                </div>
    </Modal>
</Content>

@code {
    public class Model
    {
        [Required]
        public string Title { get; set; }
        
        public string Description { get; set; }
        
        [Required]
        public string PeriodSeconds { get; set; }
        
        [Required]
        public string PeriodPaymentAmount { get; set; }
        
        [Required]
        public string MobileInternetLimitMb  { get; set; }
        
        [Required]
        public string MobileCallsMinutes { get; set; }
    }
    
    public class EditModel
    {
        [Required]
        public string Title { get; set; }
        
        public string Description { get; set; }
        
        [Required]
        public string PeriodSeconds { get; set; }
        
        [Required]
        public string PeriodPaymentAmount { get; set; }
        
        [Required]
        public string MobileInternetLimitMb  { get; set; }
        
        [Required]
        public string MobileCallsMinutes { get; set; }
    }

    private Model model = new Model();
    
    private Model editModel = new Model();

    private int editTariffId = 0; 
    
    bool _visible = false;
    
    private Form<Model> form;
    
    private Form<Model> editForm;

    private CellularTariff cellularTariff = new();
    
    public Tariff[] Tarriffs;

    private void Reset(MouseEventArgs args)
    {
        form.Reset();
    }

    private void ResetEdit(MouseEventArgs args)
    {
        editForm.Reset();
    }

    private void OnFinish(EditContext editContext)
    {
        var args = new CreateCellularTariffArgs
        {
            PeriodSeconds = int.Parse(model.PeriodSeconds),
            PeriodPaymentAmount = int.Parse(model.PeriodPaymentAmount),
            Title = model.Title,
            Description = model.Description,
            MobileInternetLimitMb = int.Parse(model.MobileInternetLimitMb) * 1014,
            MobileCallsMinutes = int.Parse(model.MobileCallsMinutes),
        };

        try
        {
            cellularTariff.CreateCellularTariff(args);
            ShowSuccessNotification(model.Title);
            form.Reset();
            Tarriffs = cellularTariff.GetTariffs();
        }
        catch (Exception)
        {
            ShowErrorNotification();
        }
    }
    
    private async void ShowSuccessNotification (string title)
    {
          
        string key = $"open{DateTime.Now}";
        await _notice.Open(new NotificationConfig()
        {
            Message = "Тариф успешно добавлен",
            Key = key,
            Description = title,
        });
    }
    
    private async void ShowEditSuccessNotification (string title)
    {
          
        string key = $"open{DateTime.Now}";
        await _notice.Open(new NotificationConfig()
        {
            Message = "Тариф успешно отредактирован",
            Key = key,
            Description = title,
        });
    }

    private void ShowErrorNotification()
    {
        _=_notice.Error(new()
        {
            Message = "Произошла ошибка",
            Description = "Повторите позднее"
        });
    }
 
    private void OnFinishFailed(EditContext editContext)
    {
        ShowErrorNotification();
    }
    
    private void ConfirmDeletion(int tariffId)
    {
        cellularTariff.DeleteTariff(tariffId);
        Tarriffs = cellularTariff.GetTariffs();
    }
    
    protected override void OnInitialized()
    {
        Tarriffs = cellularTariff.GetTariffs();
    }
    
    private void HandleOk(MouseEventArgs e)
    {
        _visible = false;
    }

    private void HandleCancel(MouseEventArgs e)
    {
        _visible = false;
    }

    private void OpenEditModal(int tariffId, string title, string desc, int periodSeconds, int paymentAmount)
    {
        _visible = true;
        editModel.Title = title;
        editModel.Description = desc;
        editModel.PeriodSeconds = periodSeconds.ToString();
        editModel.PeriodPaymentAmount = paymentAmount.ToString();
        editTariffId = tariffId;
    }
    
    private void OnFinishEdit(EditContext editContext)
    {
        var args = new EditCellularTariffArgs
        {
            TariffId = editTariffId,
            PeriodSeconds = int.Parse(editModel.PeriodSeconds),
            PeriodPaymentAmount = int.Parse(editModel.PeriodPaymentAmount),
            Title = editModel.Title,
            Description = editModel.Description,
            MobileInternetLimitMb = int.Parse(editModel.MobileInternetLimitMb) * 1014,
            MobileCallsMinutes = int.Parse(editModel.MobileCallsMinutes),
        };

        try
        {
            cellularTariff.EditCellularTariff(args);
            ShowEditSuccessNotification(editModel.Title);
            form.Reset();
            Tarriffs = cellularTariff.GetTariffs();
            _visible = false;
        }
        catch (Exception)
        {
            ShowErrorNotification();
        }
    }
}