@namespace app.WebClient.Components.Auth.LoginComponent

@using System.ComponentModel.DataAnnotations;
@using app.Core.Services;
@using System.Text.Json;
@using app.Core.Model
@using app.WebClient.Pages
@inject IJSRuntime JsRuntime;
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject NavigationManager NavManager

<div class="cont">
    <Card 
        Bordered="true" 
        Title=@("Вход абонента")
        Style="width: 300px; height: fit-content"
        >
        <Body>
          <Form Loading="loading" Model="@model" 
                LabelColSpan="8"
                WrapperColSpan="16"
                OnFinish="OnFinish" 
                OnFinishFailed="OnFinishFailed">
              <FormItem Label="Почта" >
                  <Input @bind-Value="@context.Username"/>
              </FormItem>
              <FormItem Label="Пароль">
                  <InputPassword @bind-Value="@context.Password" />
              </FormItem>
              <FormItem WrapperColOffset="8" WrapperColSpan="16">
                  <Button Type="@ButtonType.Primary" HtmlType="submit">
                      Отправить
                  </Button>
              </FormItem>
          </Form>
        </Body>
    </Card>
</div>

@code {
    public class Model
    {
        [Required]
        public string Username { get; set; }
        [Required]
        public string Password { get; set; }
    }

    private Model model = new Model();
    
    private Abonent _subscriberModel = new ();
    
    private SubscriberAuth _subscriberAuth = new ();

    protected async Task WriteAuthCookies()
    {
        await localStorage.SetItemAsync("UserType", "subscriber");
        await localStorage.SetItemAsync("Id", _subscriberModel?.Id);
        await localStorage.SetItemAsync("Login", _subscriberModel?.Email);
        await localStorage.SetItemAsync("Password", _subscriberModel?.Password);
        NavManager.NavigateTo("/subscriber/history");
    }

    private void OnFinish(EditContext editContext)
    {
        var args = new LoginArgs { Login = model.Username, Password = model.Password };

        try
        {
            _subscriberModel = _subscriberAuth.PostLogin(args);
            WriteAuthCookies();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
    }
    
    private void OnFinishFailed(EditContext editContext)
    {
        Console.WriteLine($"Failed:{JsonSerializer.Serialize(model)}");
    }

    bool loading = false;

    void toggle(bool value) => loading = value;
}